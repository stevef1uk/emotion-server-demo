import modal
import subprocess
import time

app = modal.App("emotion-go-test-app")

# GCP secret
gcp_secret = modal.Secret.from_name("gcp-registry-secret")

# Pull your image from GCP
go_image = modal.Image.from_gcp_artifact_registry(
    "europe-west6-docker.pkg.dev/emotion-server-471518/sjf-private/emotion-server:latest",
    secret=gcp_secret
).pip_install("fastapi", "uvicorn", "requests")  # FastAPI must be installed

@app.function(image=go_image)
@modal.fastapi_endpoint()
def health():
    """Health check"""
    try:
        # Check current directory and files
        pwd_result = subprocess.run(["pwd"], capture_output=True, text=True)
        ls_result = subprocess.run(["ls", "-la", "/app"], capture_output=True, text=True)
        
        # Check if binary exists and is executable
        binary_check = subprocess.run(["ls", "-la", "/app/entrypoint"], capture_output=True, text=True)
        
        return {
            "status": "healthy",
            "working_directory": pwd_result.stdout.strip(),
            "app_directory": ls_result.stdout,
            "binary_status": binary_check.stdout if binary_check.returncode == 0 else "Binary not found"
        }
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.function(image=go_image)
@modal.fastapi_endpoint()
def run_go_server():
    """Start the Go server"""
    try:
        print("Starting Go server...")
        
        # Start the Go server (we know it's at /app/server from diagnostic)
        process = subprocess.Popen(
            ["/app/server"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Give it a moment to start
        time.sleep(2)
        
        # Check if it's running
        if process.poll() is None:
            return {
                "status": "Go server started successfully", 
                "pid": process.pid,
                "message": "Server is running"
            }
        else:
            # If it exited, get the output
            stdout, stderr = process.communicate()
            return {
                "status": "Go server exited", 
                "returncode": process.returncode,
                "stdout": stdout,
                "stderr": stderr
            }
    except Exception as e:
        return {
            "status": "error",
            "message": str(e),
            "type": type(e).__name__
        }
